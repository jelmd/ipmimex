.TH ipmimex 8 "2021-03-28"

.SH "NAME"
ipmimex \- a metrics exporter for BMC

.SH "SYNOPSIS"
.nh
.na
.HP
.B ipmimex
[\fB\-DLNSVcdfh\fR]
[\fB\-l\ \fIfile\fR]
[\fB\-p\ \fIport\fR]
[\fB\-s\ \fIip\fR]
[\fB\-v\ DEBUG\fR|\fBINFO\fR|\fBWARN\fR|\fBERROR\fR|\fBFATAL\fR]
[\fB\-x\ \fImetric_regex\fR]
[\fB\-X\ \fIsensor_regex\fR]
[\fB\-i\ \fImetric_regex\fR]
[\fB\-I\ \fIsensor_regex\fR]
.ad
.hy

.SH "DESCRIPTION"
.B ipmimex
is a \fBm\fRetrics \fBex\fRporter for Board Management Controller (BMC)
and similar devices, which are directly accessible via from the host running
this utility using the Intelligent Platform Management Interface (IPMI).
Collected data can be exposed via HTTP in Prometheuse exposition format [1]
e.g. using the default endpoint URL
\fBhttp://\fIhostname\fB:\fI9290\fB/metrics\fR and thus visualized e.g. using
Grafana [2], Netdata [3], or Zabbix [4].

In contrast to prometheus' ipmi_exporter and other IPMI based metrics gatherers
\fBipmimex\fR is written in plain C (having KISS in mind)
and thus it is extremely lightweight, has beside libprom, libmicrohttp and
OS standard libs libc and libm no other dependencies, is more or less a
standalone tool and handles IPMI traffic/sensors efficiently. It
\fBdoes not need any IPMI library\fR installed, just the related kernel
module loaded (Linux: ipmi_si, Solaris: bmc) and read-write access to
/dev/ipmi0 on Linux, /dev/bmc on Solaris (or whatever path the OS IPMI driver
binds the related BMC). Per default these pathes are read-write for the root
user, only. Running \fBipmimex\fR with root privileges should be safe, however,
it is not a big deal to e.g. allow a certain group access to this path and thus
running \fBipmimex\fR as an normal, unprivileged user should be preferred.

Note that for now \fBipmimex\fR supports threshold-based, non-discrete sensors,
only. This decision has been made to keep it simple and because usually no-one
needs them, or if needed \fBipmievd\fR(8) or SNMP tools, etc. already take care
of it.

BMC device are usually slow and a priori not designed to handle IPMI queries
in parallel (IPMI specifications explicitly mentions this). So one should avoid
to query any metrics not really needed. One may use the options \fB-x\fR,
\fB-X\fR, \fB-i\fR, and \fB-I\fR with an extended regular expression (regex)
argument to exclude/include metrics (lower case options) and to exclude/include
sensors by name (upper case options). Since the list of sensors to query gets
constructed on the start of the \fBipmimex\fR (or if a change in the SDR
repository requires a re-scan), the complexity of the regex arguments have no
impact when metrics get queried by a client. So there is no need to spent time
for optimizing - instead keep it small and simple. The include options take
precedence over exclude options. So one may exclude all metrics (e.g. -x '.*')
and include only the power usage of the box (e.g. -i '.*_dcmi_power_.*'). The
experience shows, that usually the reading for the later gets returned really
fast, but the reading of a single other sensor takes ~ 2-5 ms (the scanning of
the whole SDR repository ~ 1-3 s).

\fBipmimex\fR operates in 3 modes:

.RS 2
.IP \fBdefault\fR 2
Just collects all data as it would for a /metrics HTTP request, print
it to the standard output and exit.
.IP \fBforeground\fR
Start the internal HTTP server to answer HTTP requests, but stays
attached to the console/terminal (i.e. standard input, output and error).
Use option \fB-f\fR to request this mode.
.IP \fBdaemon\fR
Start the internal HTTP server (daemon) to answer HTTP requests in the
background (fork-exec model) in a new session, detach from the
console/terminal, attach standard input, output and error to /dev/null
and finally exit with exit code \fB0\fR, if the daemon is running as
desired. Remember, if you do not specify a logfile to use, all messages
emitted by the daemon get dropped.
Use option \fB-d\fR to request this mode.
.RE

\fBipmimex\fR answers one HTTP request after another to have a
very small footprint wrt. the system and queried device. So it is
recommended to adjust your firewalls and/or HTTP proxies accordingly.
If you need SSL or authentication, use a HTTP proxy like nginx - for now
\fBipmimex\fR should be kept small and simple.

When \fBipmimex\fR runs in \fBforeground\fR or \fBdaemon\fR mode, it also
returns by default the duration it took to collect and format:
.RS 2
.TP 2
.B default
HTTP related statistics
.TP
.B process
\fBipmimex\fR process related data
.TP
.B ipmi
data obtained via IPMI
.TP
.B libprom
everything (i.e. overall incl. default, process and nvidia).
.RE

.SH "OPTIONS"
.TP 4
.B \-D
.PD 0
.TP
.B \-\-ignore\-disabled\-flag
Some buggy BMCs flag sensors as \fBD\fRisabled in the SDR capabilities but
they provide normal reading values and thresholds. So if you miss some sensors
in your list, just try this option and see, whether you get more. Dell iDRACs
are know to have this bug.

.TP
.B \-L
.PD 0
.TP
.B \-\-no\-scrapetime
Disable the overall scrapetime metrics (libprom collector), i.e. the time
elapsed when scraping all the required data. One needs also disable
collecting scrapetimes of all other collectors before this option
gets honored.

.TP
.B \-N
.PD 0
.TP
.B \-\-drop\-no\-read
Some BMC firmware (like Sun's ILOMs) provide SDRs for devices/sensors not yet
populated/conncted. If they get queried, a more or less generic command
completion code gets returned: Command not supported in present state. Hmmm,
hard to say, why and whether it will come up with the next ... So per default
such devices gets always querried and in case of Sun ILOMs will always return
no result. So useless to query - use this option to exclude such sensors. On
an X4600M2 e.g. with two CPU boards this reduces the number of queried sensors
from 96 to 52! So if in doubt, just use this option an \fBipmimex\fR reports
the sensors skipped, if any.

.TP
.B \-S
.PD 0
.TP
.B \-\-no\-scrapetime\-all
Disable recording the scrapetime of each collector separately. There is
one collector named \fBdefault\fR, which collects HTTP request/response
statistics, the optional \fBprocess\fR collector, which records metrics
about the ipmimex process itself, the \fBnvidia\fR collector, which queries
all the GPUs devices for metrics, and finally the \fBlibprom\fR collector,
which just records the time it took to collect and prom-format the data
of all other collectors.

.TP
.B \-V
.PD 0
.TP
.B \-\-no\-scrapetime\-all
Print \fBipmimex\fR version info and exit.

.TP
.B \-c
.PD 0
.TP
.B \-\-compact
Sending a HELP and TYPE comment alias description about a metric is
according to the Prometheus exposition format [1] optional. With this
option they will be ommitted in the HTTP response and thus it saves
bandwith and processing time.

.TP
.B \-d
.PD 0
.TP
.B \-\-daemon
Run \fBipmimex\fR in \fBdaemon\fR mode.

.TP
.B \-f
.PD 0
.TP
.B \-\-foreground
Run \fBipmimex\fR in \fBforeground\fR mode.

.TP
.B \-h
.PD 0
.TP
.B \-\-help
Print a short help summary to the standard output and exit.

.TP
.BI \-l " file"
.PD 0
.TP
.BI \-\-logfile= file
Log all messages to the given \fIfile\fR when the main process is running.

.TP
.BI \-n " list"
.PD 0
.TP
.BI \-\-no-metric= list
Skip all the metrics given in the comma separated \fIlist\fR of metric names.

.TP
.BI \-p " num"
.PD 0
.TP
.BI \-\-port= num
Bind to port \fInum\fR and listen there for HTTP requests. Note that a port
below 1024 usually requires additional privileges.

.TP
.BI \-s " IP"
.PD 0
.TP
.BI \-\-source= IP
Bind the HTTP server to the given \fIIP\fR address, only. Per default
it binds to 0.0.0.0, i.e. all IPs configured on this host/zone/container.
If you want to enable IPv6, just specify an IPv6 address here (\fB::\fR
is the same for IPv6 as 0.0.0.0 for IPv4).

.TP
.BI \-v " level"
.PD 0
.TP
.BI \-\-verbosity= level
Set the message verbosity to the given \fIlevel\fR. Accepted tokens are
\fBDEBUG\fR, \fBINFO\fR, \fBWARN\fR, \fBERROR\fR, \fBFATAL\fR and for
convenience \fB1\fR..\fB5\fR respectively.

.TP
.BI \-x " regex"
.PD 0
.TP
.BI \-\-exclude-metrics= regex
Exclude all metrics whoms name matches the given extended regular expression
\fIregex\fB (see also \fBregcomp\fR(3C)).

.TP
.BI \-X " regex"
.PD 0
.TP
.BI \-\-exclude-sensors= regex
Exclude all metrics whoms sensor name matches the given extended regular
expression \fIregex\fB (see also \fBregcomp\fR(3C)).

.TP
.BI \-i " regex"
.PD 0
.TP
.BI \-\-include-metrics= regex
Include all metrics whoms name matches the given extended regular expression
\fIregex\fB (see also \fBregcomp\fR(3C)). Takes precedence over excludes.

.TP
.BI \-I " regex"
.PD 0
.TP
.BI \-\-include-sensors= regex
Include all metrics whoms sensor name matches the given extended regular
expression \fIregex\fB (see also \fBregcomp\fR(3C)). Takes precedence over
excludes.

.SH "EXIT STATUS"
.TP 4
.B 0
on success.
.TP
.B 1
if an unexpected error occurred during the start (other problem).
.TP
.B 96
if an invalid option or option value got passed (config problem).
.TP
.B 100
if the logfile is not writable or port access is not allowed (permission problem).
.TP
.B 101
If BMC could not be found, is not accessible or provides no threshold-based,
non-discrete sensors.

.SH "ENVIRONMENT"

.TP 4
.B PROM_LOG_LEVEL
If no verbosity level got specified via option \fB-v\ \fI...\fR, this
environment variable gets checked for a verbosity value. If there is a
valid one, the verbosity level gets set accordingly, otherwise \fBINFO\fR
level will be used.

.SH "FILES"
.TP 4
.B /dev/ipmiN or /dev/bmc
The character special devices used by default to communicate with the BMC.

.SH "BUGS"
https://github.com/jelmd/ipmimex is the official source code repository
for \fBipmimex\fR.  If you need some new features, or metrics, or bug fixes,
please feel free to create an issue there using
https://github.com/jelmd/ipmimex/issues .

.SH "AUTHORS"
Jens Elkner

.SH "SEE ALSO"
[1]\ https://prometheus.io/docs/instrumenting/exposition_formats/
.br
[2]\ https://grafana.com/
.br
[3]\ https://www.netdata.cloud/
.br
[4]\ https://www.zabbix.com/
.\" # vim: ts=4 sw=4 filetype=nroff
